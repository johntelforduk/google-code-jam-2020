# Solution to first qualification problem, "Indicium".
# https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd27/0000000000209aa0
# It solves this problem for Test Set 1. It doesn't solve Test Set 2 :(

from sys import stdin, argv

DEBUG_ENABLED = "-d" in argv


def debug(msg):
    """If program was run with -d argument, send parm string to stdout."""
    if DEBUG_ENABLED:
        print("Debug: {}".format(msg))


def calc_n(this_matrix) -> int:
    """Find out the width / height of a square matrix."""
    (this_n, _) = max(this_matrix)
    return this_n


def print_matrix(this_matrix):
    """Print out a square matrix."""
    this_n = calc_n(this_matrix)
    for row in range(1, this_n + 1):
        for col in range(1, this_n + 1):
            print(this_matrix[col, row], ' ', end='')
        print()


# This dictionary was generated using pre_calculate.py
solutions = {(2, 2): {(1, 1): 1, (2, 2): 1, (2, 1): 2, (1, 2): 2}, (2, 4): {(1, 1): 2, (2, 2): 2, (2, 1): 1, (1, 2): 1}, (3, 6): {(1, 1): 1, (2, 2): 3, (3, 3): 2, (3, 1): 3, (1, 3): 3, (2, 1): 2, (2, 3): 1, (1, 2): 2, (3, 2): 1}, (3, 3): {(1, 1): 1, (2, 2): 1, (3, 3): 1, (3, 2): 2, (1, 3): 2, (2, 3): 3, (3, 1): 3, (1, 2): 3, (2, 1): 2}, (3, 9): {(1, 1): 3, (2, 2): 3, (3, 3): 3, (2, 3): 2, (1, 2): 2, (2, 1): 1, (3, 1): 2, (1, 3): 1, (3, 2): 1}, (4, 12): {(1, 1): 3, (2, 2): 2, (3, 3): 4, (4, 4): 3, (1, 3): 1, (2, 3): 3, (3, 2): 3, (4, 1): 4, (3, 4): 1, (1, 4): 2, (2, 4): 4, (2, 1): 1, (4, 2): 1, (1, 2): 4, (4, 3): 2, (3, 1): 2}, (4, 11): {(1, 1): 3, (2, 2): 4, (3, 3): 3, (4, 4): 1, (1, 4): 2, (3, 1): 1, (4, 1): 4, (2, 3): 1, (3, 4): 4, (1, 3): 4, (2, 4): 3, (2, 1): 2, (4, 3): 2, (4, 2): 3, (3, 2): 2, (1, 2): 1}, (4, 7): {(1, 1): 1, (2, 2): 1, (3, 3): 2, (4, 4): 3, (1, 3): 4, (4, 2): 2, (3, 4): 1, (1, 4): 2, (4, 1): 4, (2, 3): 3, (4, 3): 1, (3, 2): 4, (3, 1): 3, (2, 4): 4, (1, 2): 3, (2, 1): 2}, (4, 8): {(1, 1): 3, (2, 2): 2, (3, 3): 1, (4, 4): 2, (2, 1): 1, (3, 4): 4, (1, 2): 4, (4, 3): 3, (3, 1): 2, (2, 3): 4, (3, 2): 3, (1, 3): 2, (4, 1): 4, (2, 4): 3, (4, 2): 1, (1, 4): 1}, (4, 14): {(1, 1): 4, (2, 2): 3, (3, 3): 3, (4, 4): 4, (4, 2): 1, (3, 4): 1, (3, 1): 2, (1, 4): 3, (3, 2): 4, (2, 4): 2, (1, 2): 2, (2, 3): 4, (2, 1): 1, (4, 1): 3, (1, 3): 1, (4, 3): 2}, (4, 13): {(1, 1): 4, (2, 2): 3, (3, 3): 2, (4, 4): 4, (3, 1): 3, (2, 3): 4, (2, 4): 2, (4, 2): 1, (3, 4): 1, (1, 3): 1, (2, 1): 1, (4, 3): 3, (1, 4): 3, (4, 1): 2, (1, 2): 2, (3, 2): 4}, (4, 10): {(1, 1): 2, (2, 2): 3, (3, 3): 4, (4, 4): 1, (1, 4): 4, (2, 4): 2, (3, 2): 2, (2, 3): 1, (3, 4): 3, (4, 1): 3, (1, 3): 3, (2, 1): 4, (4, 3): 2, (1, 2): 1, (3, 1): 1, (4, 2): 4}, (4, 9): {(1, 1): 4, (2, 2): 2, (3, 3): 1, (4, 4): 2, (2, 3): 4, (4, 2): 4, (4, 3): 3, (2, 1): 3, (1, 3): 2, (2, 4): 1, (1, 2): 1, (4, 1): 1, (3, 2): 3, (3, 4): 4, (1, 4): 3, (3, 1): 2}, (4, 6): {(1, 1): 2, (2, 2): 2, (3, 3): 1, (4, 4): 1, (3, 4): 2, (4, 3): 2, (2, 4): 4, (1, 2): 1, (4, 1): 3, (3, 1): 4, (2, 3): 3, (2, 1): 1, (4, 2): 4, (1, 3): 4, (1, 4): 3, (3, 2): 3}, (4, 4): {(1, 1): 1, (2, 2): 1, (3, 3): 1, (4, 4): 1, (4, 3): 2, (3, 4): 2, (4, 2): 3, (1, 4): 4, (2, 1): 2, (2, 3): 4, (4, 1): 4, (1, 3): 3, (1, 2): 2, (2, 4): 3, (3, 2): 4, (3, 1): 3}, (4, 16): {(1, 1): 4, (2, 2): 4, (3, 3): 4, (4, 4): 4, (3, 1): 2, (2, 3): 1, (1, 2): 2, (4, 2): 3, (1, 4): 1, (2, 1): 3, (4, 1): 1, (3, 2): 1, (3, 4): 3, (2, 4): 2, (4, 3): 2, (1, 3): 3}, (5, 15): {(1, 1): 1, (2, 2): 4, (3, 3): 4, (4, 4): 3, (5, 5): 3, (5, 4): 4, (5, 2): 1, (3, 5): 2, (2, 3): 3, (4, 1): 4, (1, 2): 3, (3, 2): 5, (5, 1): 5, (3, 1): 3, (2, 4): 5, (1, 4): 2, (5, 3): 2, (3, 4): 1, (2, 1): 2, (1, 3): 5, (2, 5): 1, (4, 5): 5, (4, 3): 1, (1, 5): 4, (4, 2): 2}, (5, 17): {(1, 1): 3, (2, 2): 5, (3, 3): 5, (4, 4): 1, (5, 5): 3, (3, 2): 4, (2, 3): 3, (5, 1): 2, (2, 4): 2, (5, 3): 4, (1, 3): 1, (4, 1): 5, (2, 1): 4, (4, 2): 3, (4, 3): 2, (4, 5): 4, (5, 4): 5, (3, 5): 2, (3, 1): 1, (3, 4): 3, (5, 2): 1, (1, 2): 2, (1, 5): 5, (2, 5): 1, (1, 4): 4}, (5, 16): {(1, 1): 1, (2, 2): 5, (3, 3): 1, (4, 4): 5, (5, 5): 4, (3, 5): 2, (1, 2): 2, (2, 4): 1, (4, 2): 4, (1, 5): 5, (2, 1): 4, (1, 3): 4, (3, 4): 4, (4, 3): 3, (5, 2): 1, (3, 2): 3, (5, 1): 3, (5, 3): 5, (4, 1): 2, (4, 5): 1, (1, 4): 3, (2, 3): 2, (3, 1): 5, (5, 4): 2, (2, 5): 3}, (5, 14): {(1, 1): 4, (2, 2): 4, (3, 3): 1, (4, 4): 1, (5, 5): 4, (5, 3): 2, (1, 5): 1, (4, 2): 3, (2, 1): 1, (4, 3): 4, (5, 1): 3, (1, 4): 3, (5, 2): 1, (4, 5): 2, (3, 4): 4, (1, 2): 2, (2, 5): 5, (3, 1): 2, (2, 3): 3, (5, 4): 5, (3, 5): 3, (2, 4): 2, (1, 3): 5, (4, 1): 5, (3, 2): 5}, (5, 20): {(1, 1): 4, (2, 2): 3, (3, 3): 5, (4, 4): 5, (5, 5): 3, (3, 5): 1, (4, 2): 1, (5, 3): 4, (2, 5): 2, (2, 1): 5, (3, 4): 3, (2, 4): 4, (2, 3): 1, (3, 2): 4, (5, 1): 1, (1, 2): 2, (5, 2): 5, (1, 5): 5, (4, 1): 3, (1, 4): 1, (5, 4): 2, (4, 3): 2, (1, 3): 3, (3, 1): 2, (4, 5): 4}, (5, 10): {(1, 1): 1, (2, 2): 1, (3, 3): 3, (4, 4): 4, (5, 5): 1, (2, 5): 4, (5, 1): 3, (3, 5): 2, (2, 3): 2, (2, 1): 5, (4, 1): 2, (5, 2): 4, (5, 3): 5, (3, 1): 4, (1, 5): 3, (2, 4): 3, (1, 2): 2, (4, 2): 3, (4, 5): 5, (1, 3): 4, (5, 4): 2, (3, 2): 5, (1, 4): 5, (3, 4): 1, (4, 3): 1}, (5, 12): {(1, 1): 3, (2, 2): 2, (3, 3): 2, (4, 4): 2, (5, 5): 3, (5, 1): 2, (1, 4): 4, (2, 5): 1, (2, 3): 3, (4, 3): 1, (3, 1): 1, (1, 2): 1, (1, 5): 2, (3, 5): 5, (5, 4): 1, (1, 3): 5, (4, 1): 5, (4, 2): 3, (3, 4): 3, (3, 2): 4, (5, 3): 4, (4, 5): 4, (2, 4): 5, (5, 2): 5, (2, 1): 4}, (5, 21): {(1, 1): 2, (2, 2): 5, (3, 3): 4, (4, 4): 5, (5, 5): 5, (2, 5): 3, (5, 1): 3, (3, 4): 1, (5, 2): 1, (5, 4): 4, (4, 5): 4, (1, 4): 3, (1, 3): 5, (2, 1): 4, (5, 3): 2, (3, 1): 5, (3, 5): 2, (2, 3): 1, (4, 2): 2, (3, 2): 3, (4, 1): 1, (2, 4): 2, (4, 3): 3, (1, 2): 4, (1, 5): 1}, (5, 18): {(1, 1): 5, (2, 2): 5, (3, 3): 1, (4, 4): 5, (5, 5): 2, (3, 1): 4, (2, 3): 2, (4, 3): 4, (1, 2): 1, (5, 2): 4, (1, 5): 4, (4, 1): 2, (2, 5): 3, (5, 1): 3, (2, 4): 4, (1, 4): 2, (2, 1): 1, (3, 4): 3, (4, 5): 1, (3, 2): 2, (3, 5): 5, (4, 2): 3, (5, 3): 5, (5, 4): 1, (1, 3): 3}, (5, 13): {(1, 1): 3, (2, 2): 2, (3, 3): 2, (4, 4): 2, (5, 5): 4, (5, 1): 2, (5, 2): 1, (4, 2): 4, (5, 4): 3, (2, 5): 3, (1, 5): 2, (2, 1): 5, (1, 3): 4, (3, 2): 3, (5, 3): 5, (4, 3): 3, (3, 4): 5, (2, 3): 1, (3, 1): 4, (2, 4): 4, (4, 1): 1, (1, 2): 5, (1, 4): 1, (3, 5): 1, (4, 5): 5}, (5, 9): {(1, 1): 1, (2, 2): 1, (3, 3): 1, (4, 4): 4, (5, 5): 2, (3, 4): 3, (4, 3): 3, (2, 3): 4, (3, 5): 4, (4, 2): 2, (5, 1): 4, (3, 2): 5, (3, 1): 2, (1, 4): 5, (5, 4): 1, (1, 5): 3, (2, 5): 5, (4, 1): 5, (5, 2): 3, (4, 5): 1, (2, 1): 3, (1, 2): 4, (2, 4): 2, (1, 3): 2, (5, 3): 5}, (5, 19): {(1, 1): 5, (2, 2): 5, (3, 3): 4, (4, 4): 3, (5, 5): 2, (4, 3): 2, (5, 1): 3, (3, 4): 5, (1, 5): 4, (4, 5): 5, (5, 2): 1, (1, 3): 3, (3, 1): 2, (4, 2): 4, (5, 3): 5, (2, 3): 1, (2, 1): 4, (2, 5): 3, (1, 4): 1, (2, 4): 2, (1, 2): 2, (3, 2): 3, (3, 5): 1, (5, 4): 4, (4, 1): 1}, (5, 11): {(1, 1): 1, (2, 2): 1, (3, 3): 3, (4, 4): 2, (5, 5): 4, (5, 3): 5, (1, 3): 2, (1, 2): 5, (3, 5): 1, (3, 2): 2, (4, 3): 1, (4, 2): 4, (1, 5): 3, (2, 1): 5, (5, 2): 3, (5, 4): 1, (2, 4): 3, (1, 4): 4, (2, 5): 2, (4, 5): 5, (5, 1): 2, (3, 4): 5, (3, 1): 4, (4, 1): 3, (2, 3): 4}, (5, 8): {(1, 1): 3, (2, 2): 1, (3, 3): 1, (4, 4): 2, (5, 5): 1, (2, 4): 4, (1, 4): 1, (5, 3): 2, (3, 1): 2, (1, 2): 2, (4, 1): 1, (5, 4): 3, (2, 1): 5, (1, 3): 4, (3, 2): 3, (2, 5): 2, (3, 5): 4, (4, 3): 5, (1, 5): 5, (5, 1): 4, (3, 4): 5, (5, 2): 5, (4, 2): 4, (4, 5): 3, (2, 3): 3}, (5, 23): {(1, 1): 5, (2, 2): 4, (3, 3): 4, (4, 4): 5, (5, 5): 5, (3, 4): 1, (5, 2): 1, (4, 5): 1, (2, 5): 3, (3, 5): 2, (3, 2): 5, (1, 5): 4, (2, 3): 5, (5, 1): 2, (2, 1): 1, (1, 4): 3, (1, 3): 1, (2, 4): 2, (3, 1): 3, (4, 3): 2, (5, 4): 4, (1, 2): 2, (4, 2): 3, (5, 3): 3, (4, 1): 4}, (5, 22): {(1, 1): 5, (2, 2): 3, (3, 3): 5, (4, 4): 5, (5, 5): 4, (4, 5): 3, (5, 2): 5, (1, 4): 2, (5, 4): 3, (4, 2): 2, (5, 1): 2, (3, 1): 3, (3, 5): 2, (1, 3): 3, (3, 2): 1, (3, 4): 4, (2, 4): 1, (4, 3): 4, (2, 1): 4, (2, 3): 2, (5, 3): 1, (1, 5): 1, (1, 2): 4, (2, 5): 5, (4, 1): 1}, (5, 7): {(1, 1): 2, (2, 2): 2, (3, 3): 1, (4, 4): 1, (5, 5): 1, (4, 2): 5, (5, 4): 4, (5, 1): 5, (4, 3): 3, (3, 4): 2, (1, 4): 3, (2, 4): 5, (2, 3): 4, (5, 3): 2, (4, 5): 2, (3, 1): 3, (4, 1): 4, (1, 2): 1, (3, 2): 4, (1, 5): 4, (3, 5): 5, (2, 5): 3, (2, 1): 1, (5, 2): 3, (1, 3): 5}, (5, 25): {(1, 1): 5, (2, 2): 5, (3, 3): 5, (4, 4): 5, (5, 5): 5, (2, 1): 4, (5, 3): 4, (2, 5): 3, (4, 2): 4, (5, 1): 3, (2, 3): 2, (3, 5): 2, (1, 5): 4, (3, 2): 3, (1, 4): 3, (5, 4): 2, (1, 3): 1, (2, 4): 1, (3, 1): 1, (4, 3): 3, (3, 4): 4, (5, 2): 1, (1, 2): 2, (4, 1): 2, (4, 5): 1}, (5, 5): {(1, 1): 1, (2, 2): 1, (3, 3): 1, (4, 4): 1, (5, 5): 1, (1, 3): 2, (3, 2): 2, (2, 4): 2, (2, 3): 5, (2, 5): 4, (5, 3): 3, (3, 4): 3, (5, 2): 5, (3, 5): 5, (1, 4): 5, (5, 1): 2, (4, 2): 3, (4, 5): 2, (4, 3): 4, (3, 1): 4, (1, 2): 4, (5, 4): 4, (1, 5): 3, (4, 1): 5, (2, 1): 3}}


num_cases = int(stdin.readline())

for case in range(1, num_cases + 1):
    line_list = list(stdin.readline().split(' '))
    n = int(line_list[0])
    k = int(line_list[1])

    debug('n = {}'.format(n))
    debug('k = {}'.format(k))

    if (n, k) in solutions:
        print('Case #{}: POSSIBLE'.format(case))
        print_matrix(solutions[n, k])
    else:
        print('Case #{}: IMPOSSIBLE'.format(case))
